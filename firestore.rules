/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public-read, owner-write model for redirect links, with restricted access to user activity logs.
 *
 * Data Structure:
 * - /redirectLinks/{redirectLinkId}: Stores redirect link information. Publicly readable.
 * - /redirectLinks/{redirectLinkId}/userActivities/{userActivityId}: Stores user activity logs for each redirect link.
 *
 * Key Security Decisions:
 * - Redirect links are publicly readable, enabling the core redirection functionality.
 * - User activity logs are only writable.
 * - The rules relies on denormalized redirectLinkId to avoid read operations to parent documents for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to redirect links, while restricting creation, updates, and deletion to authenticated users.
     * @path /redirectLinks/{redirectLinkId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null && request.resource.data.id == request.auth.uid;
     * @allow update: if request.auth != null && resource.data.id == request.auth.uid;
     * @allow delete: if request.auth != null && resource.data.id == request.auth.uid;
     * @deny create: if request.auth == null;
     * @deny update: if request.auth == null || resource.data.id != request.auth.uid;
     * @deny delete: if request.auth == null || resource.data.id != request.auth.uid;
     * @principle Allows any user to read redirect links, but only the creator can modify or delete them.
     */
    match /redirectLinks/{redirectLinkId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.id == redirectLinkId;
      allow update: if isSignedIn() && isExistingOwner(redirectLinkId);
      allow delete: if isSignedIn() && isExistingOwner(redirectLinkId);
    }

    /**
     * @description Restricts access to user activity logs under a specific redirect link. Only authenticated users can write these logs.
     * @path /redirectLinks/{redirectLinkId}/userActivities/{userActivityId}
     * @allow create: if isSignedIn() && request.resource.data.redirectLinkId == redirectLinkId;
     * @deny get: if true;
     * @deny list: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Protects user activity data by restricting read access and ensuring only authenticated users can create activity logs.
     */
    match /redirectLinks/{redirectLinkId}/userActivities/{userActivityId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.redirectLinkId == redirectLinkId;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(redirectLinkId) {
      return request.auth.uid == redirectLinkId;
    }

    function isExistingOwner(redirectLinkId) {
      return isOwner(redirectLinkId) && resource != null;
    }
  }
}